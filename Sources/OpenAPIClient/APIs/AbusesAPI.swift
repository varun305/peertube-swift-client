//
// AbusesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AbusesAPI {

    /**
     Delete an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesAbuseIdDelete(abuseId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1AbusesAbuseIdDeleteWithRequestBuilder(abuseId: abuseId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an abuse
     - DELETE /api/v1/abuses/{abuseId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1AbusesAbuseIdDeleteWithRequestBuilder(abuseId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/abuses/{abuseId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an abuse message
     
     - parameter abuseId: (path) Abuse id 
     - parameter abuseMessageId: (path) Abuse message id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesAbuseIdMessagesAbuseMessageIdDelete(abuseId: Int, abuseMessageId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1AbusesAbuseIdMessagesAbuseMessageIdDeleteWithRequestBuilder(abuseId: abuseId, abuseMessageId: abuseMessageId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an abuse message
     - DELETE /api/v1/abuses/{abuseId}/messages/{abuseMessageId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter abuseMessageId: (path) Abuse message id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1AbusesAbuseIdMessagesAbuseMessageIdDeleteWithRequestBuilder(abuseId: Int, abuseMessageId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/abuses/{abuseId}/messages/{abuseMessageId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let abuseMessageIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseMessageId))"
        let abuseMessageIdPostEscape = abuseMessageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseMessageId}", with: abuseMessageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List messages of an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1AbusesAbuseIdMessagesGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesAbuseIdMessagesGet(abuseId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1AbusesAbuseIdMessagesGet200Response {
        return try await apiV1AbusesAbuseIdMessagesGetWithRequestBuilder(abuseId: abuseId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List messages of an abuse
     - GET /api/v1/abuses/{abuseId}/messages
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1AbusesAbuseIdMessagesGet200Response> 
     */
    open class func apiV1AbusesAbuseIdMessagesGetWithRequestBuilder(abuseId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1AbusesAbuseIdMessagesGet200Response> {
        var localVariablePath = "/api/v1/abuses/{abuseId}/messages"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1AbusesAbuseIdMessagesGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add message to an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiV1AbusesAbuseIdMessagesPostRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesAbuseIdMessagesPost(abuseId: Int, apiV1AbusesAbuseIdMessagesPostRequest: ApiV1AbusesAbuseIdMessagesPostRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1AbusesAbuseIdMessagesPostWithRequestBuilder(abuseId: abuseId, apiV1AbusesAbuseIdMessagesPostRequest: apiV1AbusesAbuseIdMessagesPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add message to an abuse
     - POST /api/v1/abuses/{abuseId}/messages
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter apiV1AbusesAbuseIdMessagesPostRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1AbusesAbuseIdMessagesPostWithRequestBuilder(abuseId: Int, apiV1AbusesAbuseIdMessagesPostRequest: ApiV1AbusesAbuseIdMessagesPostRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/abuses/{abuseId}/messages"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1AbusesAbuseIdMessagesPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiV1AbusesAbuseIdPutRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesAbuseIdPut(abuseId: Int, apiV1AbusesAbuseIdPutRequest: ApiV1AbusesAbuseIdPutRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1AbusesAbuseIdPutWithRequestBuilder(abuseId: abuseId, apiV1AbusesAbuseIdPutRequest: apiV1AbusesAbuseIdPutRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update an abuse
     - PUT /api/v1/abuses/{abuseId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter apiV1AbusesAbuseIdPutRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1AbusesAbuseIdPutWithRequestBuilder(abuseId: Int, apiV1AbusesAbuseIdPutRequest: ApiV1AbusesAbuseIdPutRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/abuses/{abuseId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1AbusesAbuseIdPutRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Report an abuse
     
     - parameter apiV1AbusesPostRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1AbusesPost200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AbusesPost(apiV1AbusesPostRequest: ApiV1AbusesPostRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1AbusesPost200Response {
        return try await apiV1AbusesPostWithRequestBuilder(apiV1AbusesPostRequest: apiV1AbusesPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Report an abuse
     - POST /api/v1/abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiV1AbusesPostRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1AbusesPost200Response> 
     */
    open class func apiV1AbusesPostWithRequestBuilder(apiV1AbusesPostRequest: ApiV1AbusesPostRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1AbusesPost200Response> {
        let localVariablePath = "/api/v1/abuses"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1AbusesPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1AbusesPost200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter predefinedReason
     */
    public enum PredefinedReason_getAbuses: String, Sendable, CaseIterable {
        case violentorabusive = "violentOrAbusive"
        case hatefulorabusive = "hatefulOrAbusive"
        case spamormisleading = "spamOrMisleading"
        case privacy = "privacy"
        case rights = "rights"
        case serverrules = "serverRules"
        case thumbnails = "thumbnails"
        case captions = "captions"
    }

    /**
     * enum for parameter videoIs
     */
    public enum VideoIs_getAbuses: String, Sendable, CaseIterable {
        case deleted = "deleted"
        case blacklisted = "blacklisted"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getAbuses: String, Sendable, CaseIterable {
        case video = "video"
        case comment = "comment"
        case account = "account"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAbuses: String, Sendable, CaseIterable {
        case id = "-id"
        case createdat = "-createdAt"
        case state = "-state"
    }

    /**
     List abuses
     
     - parameter id: (query) only list the report with this id (optional)
     - parameter predefinedReason: (query) predefined reason the listed reports should contain (optional)
     - parameter search: (query) plain search that will match with video titles, reporter names and more (optional)
     - parameter state: (query)  (optional)
     - parameter searchReporter: (query) only list reports of a specific reporter (optional)
     - parameter searchReportee: (query) only list reports of a specific reportee (optional)
     - parameter searchVideo: (query) only list reports of a specific video (optional)
     - parameter searchVideoChannel: (query) only list reports of a specific video channel (optional)
     - parameter videoIs: (query) only list deleted or blocklisted videos (optional)
     - parameter filter: (query) only list account, comment or video reports (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetMyAbuses200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAbuses(id: Int? = nil, predefinedReason: [PredefinedReason_getAbuses]? = nil, search: String? = nil, state: AbuseStateSet? = nil, searchReporter: String? = nil, searchReportee: String? = nil, searchVideo: String? = nil, searchVideoChannel: String? = nil, videoIs: VideoIs_getAbuses? = nil, filter: Filter_getAbuses? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_getAbuses? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetMyAbuses200Response {
        return try await getAbusesWithRequestBuilder(id: id, predefinedReason: predefinedReason, search: search, state: state, searchReporter: searchReporter, searchReportee: searchReportee, searchVideo: searchVideo, searchVideoChannel: searchVideoChannel, videoIs: videoIs, filter: filter, start: start, count: count, sort: sort, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List abuses
     - GET /api/v1/abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) only list the report with this id (optional)
     - parameter predefinedReason: (query) predefined reason the listed reports should contain (optional)
     - parameter search: (query) plain search that will match with video titles, reporter names and more (optional)
     - parameter state: (query)  (optional)
     - parameter searchReporter: (query) only list reports of a specific reporter (optional)
     - parameter searchReportee: (query) only list reports of a specific reportee (optional)
     - parameter searchVideo: (query) only list reports of a specific video (optional)
     - parameter searchVideoChannel: (query) only list reports of a specific video channel (optional)
     - parameter videoIs: (query) only list deleted or blocklisted videos (optional)
     - parameter filter: (query) only list account, comment or video reports (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetMyAbuses200Response> 
     */
    open class func getAbusesWithRequestBuilder(id: Int? = nil, predefinedReason: [PredefinedReason_getAbuses]? = nil, search: String? = nil, state: AbuseStateSet? = nil, searchReporter: String? = nil, searchReportee: String? = nil, searchVideo: String? = nil, searchVideoChannel: String? = nil, videoIs: VideoIs_getAbuses? = nil, filter: Filter_getAbuses? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_getAbuses? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GetMyAbuses200Response> {
        let localVariablePath = "/api/v1/abuses"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "predefinedReason": (wrappedValue: predefinedReason?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchReporter": (wrappedValue: searchReporter?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchReportee": (wrappedValue: searchReportee?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchVideo": (wrappedValue: searchVideo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchVideoChannel": (wrappedValue: searchVideoChannel?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "videoIs": (wrappedValue: videoIs?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMyAbuses200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getMyAbuses: String, Sendable, CaseIterable {
        case id = "-id"
        case createdat = "-createdAt"
        case state = "-state"
    }

    /**
     List my abuses
     
     - parameter id: (query) only list the report with this id (optional)
     - parameter state: (query)  (optional)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetMyAbuses200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMyAbuses(id: Int? = nil, state: AbuseStateSet? = nil, sort: Sort_getMyAbuses? = nil, start: Int? = nil, count: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetMyAbuses200Response {
        return try await getMyAbusesWithRequestBuilder(id: id, state: state, sort: sort, start: start, count: count, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List my abuses
     - GET /api/v1/users/me/abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) only list the report with this id (optional)
     - parameter state: (query)  (optional)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetMyAbuses200Response> 
     */
    open class func getMyAbusesWithRequestBuilder(id: Int? = nil, state: AbuseStateSet? = nil, sort: Sort_getMyAbuses? = nil, start: Int? = nil, count: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GetMyAbuses200Response> {
        let localVariablePath = "/api/v1/users/me/abuses"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMyAbuses200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
