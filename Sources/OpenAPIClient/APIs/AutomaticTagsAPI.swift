//
// AutomaticTagsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AutomaticTagsAPI {

    /**
     Get account available auto tags
     
     - parameter accountName: (path) account name to get auto tag policies 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AutomaticTagAvailable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AutomaticTagsAccountsAccountNameAvailableGet(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AutomaticTagAvailable {
        return try await apiV1AutomaticTagsAccountsAccountNameAvailableGetWithRequestBuilder(accountName: accountName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get account available auto tags
     - GET /api/v1/automatic-tags/accounts/{accountName}/available
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path) account name to get auto tag policies 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AutomaticTagAvailable> 
     */
    open class func apiV1AutomaticTagsAccountsAccountNameAvailableGetWithRequestBuilder(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AutomaticTagAvailable> {
        var localVariablePath = "/api/v1/automatic-tags/accounts/{accountName}/available"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutomaticTagAvailable>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get account auto tag policies on comments
     
     - parameter accountName: (path) account name to get auto tag policies 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CommentAutoTagPolicies
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsGet(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CommentAutoTagPolicies {
        return try await apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsGetWithRequestBuilder(accountName: accountName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get account auto tag policies on comments
     - GET /api/v1/automatic-tags/policies/accounts/{accountName}/comments
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path) account name to get auto tag policies 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CommentAutoTagPolicies> 
     */
    open class func apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsGetWithRequestBuilder(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CommentAutoTagPolicies> {
        var localVariablePath = "/api/v1/automatic-tags/policies/accounts/{accountName}/comments"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentAutoTagPolicies>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update account auto tag policies on comments
     
     - parameter accountName: (path) account name to update auto tag policies 
     - parameter apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPut(accountName: String, apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest: ApiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutWithRequestBuilder(accountName: accountName, apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest: apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update account auto tag policies on comments
     - PUT /api/v1/automatic-tags/policies/accounts/{accountName}/comments
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path) account name to update auto tag policies 
     - parameter apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutWithRequestBuilder(accountName: String, apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest: ApiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/automatic-tags/policies/accounts/{accountName}/comments"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1AutomaticTagsPoliciesAccountsAccountNameCommentsPutRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get server available auto tags
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AutomaticTagAvailable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AutomaticTagsServerAvailableGet(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AutomaticTagAvailable {
        return try await apiV1AutomaticTagsServerAvailableGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get server available auto tags
     - GET /api/v1/automatic-tags/server/available
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AutomaticTagAvailable> 
     */
    open class func apiV1AutomaticTagsServerAvailableGetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AutomaticTagAvailable> {
        let localVariablePath = "/api/v1/automatic-tags/server/available"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutomaticTagAvailable>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
