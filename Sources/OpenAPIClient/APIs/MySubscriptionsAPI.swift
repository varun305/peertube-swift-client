//
// MySubscriptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class MySubscriptionsAPI {

    /**
     Get if subscriptions exist for my user
     
     - parameter uris: (query) list of uris to check if each is part of the user subscriptions 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsExistGet(uris: [String], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await apiV1UsersMeSubscriptionsExistGetWithRequestBuilder(uris: uris, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get if subscriptions exist for my user
     - GET /api/v1/users/me/subscriptions/exist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter uris: (query) list of uris to check if each is part of the user subscriptions 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func apiV1UsersMeSubscriptionsExistGetWithRequestBuilder(uris: [String], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/api/v1/users/me/subscriptions/exist"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uris": (wrappedValue: uris.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_apiV1UsersMeSubscriptionsGet: String, Sendable, CaseIterable {
        case id = "-id"
        case createdat = "-createdAt"
        case channelupdatedat = "-channelUpdatedAt"
    }

    /**
     List my user subscriptions
     
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoChannelList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsGet(start: Int? = nil, count: Int? = nil, sort: Sort_apiV1UsersMeSubscriptionsGet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoChannelList {
        return try await apiV1UsersMeSubscriptionsGetWithRequestBuilder(start: start, count: count, sort: sort, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List my user subscriptions
     - GET /api/v1/users/me/subscriptions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoChannelList> 
     */
    open class func apiV1UsersMeSubscriptionsGetWithRequestBuilder(start: Int? = nil, count: Int? = nil, sort: Sort_apiV1UsersMeSubscriptionsGet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoChannelList> {
        let localVariablePath = "/api/v1/users/me/subscriptions"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoChannelList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add subscription to my user
     
     - parameter apiV1UsersMeSubscriptionsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsPost(apiV1UsersMeSubscriptionsPostRequest: ApiV1UsersMeSubscriptionsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1UsersMeSubscriptionsPostWithRequestBuilder(apiV1UsersMeSubscriptionsPostRequest: apiV1UsersMeSubscriptionsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add subscription to my user
     - POST /api/v1/users/me/subscriptions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiV1UsersMeSubscriptionsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1UsersMeSubscriptionsPostWithRequestBuilder(apiV1UsersMeSubscriptionsPostRequest: ApiV1UsersMeSubscriptionsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/me/subscriptions"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1UsersMeSubscriptionsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete subscription of my user
     
     - parameter subscriptionHandle: (path) The subscription handle 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsSubscriptionHandleDelete(subscriptionHandle: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1UsersMeSubscriptionsSubscriptionHandleDeleteWithRequestBuilder(subscriptionHandle: subscriptionHandle, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete subscription of my user
     - DELETE /api/v1/users/me/subscriptions/{subscriptionHandle}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter subscriptionHandle: (path) The subscription handle 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1UsersMeSubscriptionsSubscriptionHandleDeleteWithRequestBuilder(subscriptionHandle: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/users/me/subscriptions/{subscriptionHandle}"
        let subscriptionHandlePreEscape = "\(APIHelper.mapValueToPathItem(subscriptionHandle))"
        let subscriptionHandlePostEscape = subscriptionHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{subscriptionHandle}", with: subscriptionHandlePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get subscription of my user
     
     - parameter subscriptionHandle: (path) The subscription handle 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoChannel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsSubscriptionHandleGet(subscriptionHandle: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoChannel {
        return try await apiV1UsersMeSubscriptionsSubscriptionHandleGetWithRequestBuilder(subscriptionHandle: subscriptionHandle, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get subscription of my user
     - GET /api/v1/users/me/subscriptions/{subscriptionHandle}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter subscriptionHandle: (path) The subscription handle 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoChannel> 
     */
    open class func apiV1UsersMeSubscriptionsSubscriptionHandleGetWithRequestBuilder(subscriptionHandle: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoChannel> {
        var localVariablePath = "/api/v1/users/me/subscriptions/{subscriptionHandle}"
        let subscriptionHandlePreEscape = "\(APIHelper.mapValueToPathItem(subscriptionHandle))"
        let subscriptionHandlePostEscape = subscriptionHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{subscriptionHandle}", with: subscriptionHandlePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoChannel>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_apiV1UsersMeSubscriptionsVideosGet: String, Sendable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter include
     */
    public enum Include_apiV1UsersMeSubscriptionsVideosGet: Int, Sendable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
        case _16 = 16
        case _32 = 32
    }

    /**
     * enum for parameter skipCount
     */
    public enum SkipCount_apiV1UsersMeSubscriptionsVideosGet: String, Sendable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_apiV1UsersMeSubscriptionsVideosGet: String, Sendable, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
        case best = "-best"
    }

    /**
     List videos of subscriptions of my user
     
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter isLive: (query) whether or not the video is a live (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter host: (query) Find elements owned by this host (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** **Admins and moderators only** filter on videos that contain one of these automatic tags (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote objects (optional)
     - parameter include: (query) **Only administrators and moderators can use this parameter**  Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES - &#x60;16&#x60; CAPTIONS - &#x60;32&#x60; VIDEO SOURCE  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query)  (optional)
     - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeSubscriptionsVideosGet(categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, host: String? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, nsfw: Nsfw_apiV1UsersMeSubscriptionsVideosGet? = nil, isLocal: Bool? = nil, include: Include_apiV1UsersMeSubscriptionsVideosGet? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: SkipCount_apiV1UsersMeSubscriptionsVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1UsersMeSubscriptionsVideosGet? = nil, excludeAlreadyWatched: Bool? = nil, search: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoListResponse {
        return try await apiV1UsersMeSubscriptionsVideosGetWithRequestBuilder(categoryOneOf: categoryOneOf, isLive: isLive, tagsOneOf: tagsOneOf, tagsAllOf: tagsAllOf, licenceOneOf: licenceOneOf, languageOneOf: languageOneOf, host: host, autoTagOneOf: autoTagOneOf, nsfw: nsfw, isLocal: isLocal, include: include, privacyOneOf: privacyOneOf, hasHLSFiles: hasHLSFiles, hasWebVideoFiles: hasWebVideoFiles, skipCount: skipCount, start: start, count: count, sort: sort, excludeAlreadyWatched: excludeAlreadyWatched, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List videos of subscriptions of my user
     - GET /api/v1/users/me/subscriptions/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter isLive: (query) whether or not the video is a live (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter host: (query) Find elements owned by this host (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** **Admins and moderators only** filter on videos that contain one of these automatic tags (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote objects (optional)
     - parameter include: (query) **Only administrators and moderators can use this parameter**  Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES - &#x60;16&#x60; CAPTIONS - &#x60;32&#x60; VIDEO SOURCE  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query)  (optional)
     - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func apiV1UsersMeSubscriptionsVideosGetWithRequestBuilder(categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, host: String? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, nsfw: Nsfw_apiV1UsersMeSubscriptionsVideosGet? = nil, isLocal: Bool? = nil, include: Include_apiV1UsersMeSubscriptionsVideosGet? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: SkipCount_apiV1UsersMeSubscriptionsVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1UsersMeSubscriptionsVideosGet? = nil, excludeAlreadyWatched: Bool? = nil, search: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoListResponse> {
        let localVariablePath = "/api/v1/users/me/subscriptions/videos"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categoryOneOf": (wrappedValue: categoryOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isLive": (wrappedValue: isLive?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tagsOneOf": (wrappedValue: tagsOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tagsAllOf": (wrappedValue: tagsAllOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "licenceOneOf": (wrappedValue: licenceOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languageOneOf": (wrappedValue: languageOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "host": (wrappedValue: host?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "autoTagOneOf": (wrappedValue: autoTagOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "nsfw": (wrappedValue: nsfw?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isLocal": (wrappedValue: isLocal?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "privacyOneOf": (wrappedValue: privacyOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "hasHLSFiles": (wrappedValue: hasHLSFiles?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "hasWebVideoFiles": (wrappedValue: hasWebVideoFiles?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "skipCount": (wrappedValue: skipCount?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "excludeAlreadyWatched": (wrappedValue: excludeAlreadyWatched?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoListResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
