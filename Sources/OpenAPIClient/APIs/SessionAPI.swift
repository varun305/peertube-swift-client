//
// SessionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SessionAPI {

    /**
     Login prerequisite
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthClient
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOAuthClient(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthClient {
        return try await getOAuthClientWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Login prerequisite
     - GET /api/v1/oauth-clients/local
     - You need to retrieve a client id and secret before [logging in](#operation/getOAuthToken).
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthClient> 
     */
    open class func getOAuthClientWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<OAuthClient> {
        let localVariablePath = "/api/v1/oauth-clients/local"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthClient>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter grantType
     */
    public enum GrantType_getOAuthToken: String, Sendable, CaseIterable {
        case password = "password"
        case refreshToken = "refresh_token"
    }

    /**
     Login
     
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter grantType: (form)  (optional, default to .password)
     - parameter username: (form) immutable name of the user, used to find or mention its actor (optional)
     - parameter password: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetOAuthToken200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOAuthToken(clientId: String? = nil, clientSecret: String? = nil, grantType: GrantType_getOAuthToken? = nil, username: String? = nil, password: String? = nil, refreshToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetOAuthToken200Response {
        return try await getOAuthTokenWithRequestBuilder(clientId: clientId, clientSecret: clientSecret, grantType: grantType, username: username, password: password, refreshToken: refreshToken, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Login
     - POST /api/v1/users/token
     - With your [client id and secret](#operation/getOAuthClient), you can retrieve an access and refresh tokens.
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter grantType: (form)  (optional, default to .password)
     - parameter username: (form) immutable name of the user, used to find or mention its actor (optional)
     - parameter password: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetOAuthToken200Response> 
     */
    open class func getOAuthTokenWithRequestBuilder(clientId: String? = nil, clientSecret: String? = nil, grantType: GrantType_getOAuthToken? = nil, username: String? = nil, password: String? = nil, refreshToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GetOAuthToken200Response> {
        let localVariablePath = "/api/v1/users/token"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "client_id": clientId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "client_secret": clientSecret?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "grant_type": grantType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "username": username?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "password": password?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "refresh_token": refreshToken?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOAuthToken200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Logout
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func revokeOAuthToken(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await revokeOAuthTokenWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Logout
     - POST /api/v1/users/revoke-token
     - Revokes your access token and its associated refresh token, destroying your current session.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuthTokenWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/revoke-token"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
