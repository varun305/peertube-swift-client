//
// UserImportsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class UserImportsAPI {

    /**
     Get latest user import
     
     - parameter userId: (path) User id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetLatestUserImport200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLatestUserImport(userId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetLatestUserImport200Response {
        return try await getLatestUserImportWithRequestBuilder(userId: userId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get latest user import
     - GET /api/v1/users/{userId}/imports/latest
     - **PeerTube >= 6.1**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter userId: (path) User id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetLatestUserImport200Response> 
     */
    open class func getLatestUserImportWithRequestBuilder(userId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GetLatestUserImport200Response> {
        var localVariablePath = "/api/v1/users/{userId}/imports/latest"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetLatestUserImport200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send chunk for the resumable user import
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userImportResumable(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await userImportResumableWithRequestBuilder(uploadId: uploadId, contentRange: contentRange, contentLength: contentLength, body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Send chunk for the resumable user import
     - PUT /api/v1/users/{userId}/imports/import-resumable
     - **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the import of the archive
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func userImportResumableWithRequestBuilder(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/{userId}/imports/import-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
            "Content-Range": contentRange.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Cancel the resumable user import
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userImportResumableCancel(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await userImportResumableCancelWithRequestBuilder(uploadId: uploadId, contentLength: contentLength, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Cancel the resumable user import
     - DELETE /api/v1/users/{userId}/imports/import-resumable
     - **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the resumable user import
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - responseHeaders: [Content-Length(Double)]
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func userImportResumableCancelWithRequestBuilder(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/{userId}/imports/import-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize the resumable user import
     
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter userImportResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userImportResumableInit(xUploadContentLength: Double, xUploadContentType: String, userImportResumable: UserImportResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await userImportResumableInitWithRequestBuilder(xUploadContentLength: xUploadContentLength, xUploadContentType: xUploadContentType, userImportResumable: userImportResumable, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize the resumable user import
     - POST /api/v1/users/{userId}/imports/import-resumable
     - **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the import of the archive
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - responseHeaders: [Location(String), Content-Length(Double)]
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter userImportResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func userImportResumableInitWithRequestBuilder(xUploadContentLength: Double, xUploadContentType: String, userImportResumable: UserImportResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/{userId}/imports/import-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userImportResumable, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Upload-Content-Length": xUploadContentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "X-Upload-Content-Type": xUploadContentType.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
