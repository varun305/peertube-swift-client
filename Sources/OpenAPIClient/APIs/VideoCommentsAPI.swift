//
// VideoCommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoCommentsAPI {

    /**
     List comments on user's videos
     
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter searchAccount: (query) Filter comments by searching on the account (optional)
     - parameter searchVideo: (query) Filter comments by searching on the video (optional)
     - parameter videoId: (query) Limit results on this specific video (optional)
     - parameter videoChannelId: (query) Limit results on this specific video channel (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** filter on comments that contain one of these automatic tags (optional)
     - parameter isHeldForReview: (query) only display comments that are held for review (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1UsersMeVideosCommentsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeVideosCommentsGet(search: String? = nil, searchAccount: String? = nil, searchVideo: String? = nil, videoId: Int? = nil, videoChannelId: Int? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, isHeldForReview: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1UsersMeVideosCommentsGet200Response {
        return try await apiV1UsersMeVideosCommentsGetWithRequestBuilder(search: search, searchAccount: searchAccount, searchVideo: searchVideo, videoId: videoId, videoChannelId: videoChannelId, autoTagOneOf: autoTagOneOf, isHeldForReview: isHeldForReview, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List comments on user's videos
     - GET /api/v1/users/me/videos/comments
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter searchAccount: (query) Filter comments by searching on the account (optional)
     - parameter searchVideo: (query) Filter comments by searching on the video (optional)
     - parameter videoId: (query) Limit results on this specific video (optional)
     - parameter videoChannelId: (query) Limit results on this specific video channel (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** filter on comments that contain one of these automatic tags (optional)
     - parameter isHeldForReview: (query) only display comments that are held for review (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response> 
     */
    open class func apiV1UsersMeVideosCommentsGetWithRequestBuilder(search: String? = nil, searchAccount: String? = nil, searchVideo: String? = nil, videoId: Int? = nil, videoChannelId: Int? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, isHeldForReview: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response> {
        let localVariablePath = "/api/v1/users/me/videos/comments"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchAccount": (wrappedValue: searchAccount?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchVideo": (wrappedValue: searchVideo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "videoId": (wrappedValue: videoId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "videoChannelId": (wrappedValue: videoChannelId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "autoTagOneOf": (wrappedValue: autoTagOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isHeldForReview": (wrappedValue: isHeldForReview?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List instance comments
     
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter searchAccount: (query) Filter comments by searching on the account (optional)
     - parameter searchVideo: (query) Filter comments by searching on the video (optional)
     - parameter videoId: (query) Limit results on this specific video (optional)
     - parameter videoChannelId: (query) Limit results on this specific video channel (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** filter on comments that contain one of these automatic tags (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote objects (optional)
     - parameter onLocalVideo: (query) Display only objects of local or remote videos (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1UsersMeVideosCommentsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosCommentsGet(search: String? = nil, searchAccount: String? = nil, searchVideo: String? = nil, videoId: Int? = nil, videoChannelId: Int? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, isLocal: Bool? = nil, onLocalVideo: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1UsersMeVideosCommentsGet200Response {
        return try await apiV1VideosCommentsGetWithRequestBuilder(search: search, searchAccount: searchAccount, searchVideo: searchVideo, videoId: videoId, videoChannelId: videoChannelId, autoTagOneOf: autoTagOneOf, isLocal: isLocal, onLocalVideo: onLocalVideo, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List instance comments
     - GET /api/v1/videos/comments
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter searchAccount: (query) Filter comments by searching on the account (optional)
     - parameter searchVideo: (query) Filter comments by searching on the video (optional)
     - parameter videoId: (query) Limit results on this specific video (optional)
     - parameter videoChannelId: (query) Limit results on this specific video channel (optional)
     - parameter autoTagOneOf: (query) **PeerTube &gt;&#x3D; 6.2** filter on comments that contain one of these automatic tags (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote objects (optional)
     - parameter onLocalVideo: (query) Display only objects of local or remote videos (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response> 
     */
    open class func apiV1VideosCommentsGetWithRequestBuilder(search: String? = nil, searchAccount: String? = nil, searchVideo: String? = nil, videoId: Int? = nil, videoChannelId: Int? = nil, autoTagOneOf: GetAccountVideosTagsAllOfParameter? = nil, isLocal: Bool? = nil, onLocalVideo: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response> {
        let localVariablePath = "/api/v1/videos/comments"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchAccount": (wrappedValue: searchAccount?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchVideo": (wrappedValue: searchVideo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "videoId": (wrappedValue: videoId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "videoChannelId": (wrappedValue: videoChannelId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "autoTagOneOf": (wrappedValue: autoTagOneOf?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isLocal": (wrappedValue: isLocal?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "onLocalVideo": (wrappedValue: onLocalVideo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1UsersMeVideosCommentsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_apiV1VideosIdCommentThreadsGet: String, Sendable, CaseIterable {
        case createdat = "-createdAt"
        case totalreplies = "-totalReplies"
    }

    /**
     List threads of a video
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CommentThreadResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentThreadsGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1VideosIdCommentThreadsGet? = nil, xPeertubeVideoPassword: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CommentThreadResponse {
        return try await apiV1VideosIdCommentThreadsGetWithRequestBuilder(id: id, start: start, count: count, sort: sort, xPeertubeVideoPassword: xPeertubeVideoPassword, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List threads of a video
     - GET /api/v1/videos/{id}/comment-threads
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CommentThreadResponse> 
     */
    open class func apiV1VideosIdCommentThreadsGetWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1VideosIdCommentThreadsGet? = nil, xPeertubeVideoPassword: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CommentThreadResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Create a thread
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CommentThreadPostResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentThreadsPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CommentThreadPostResponse {
        return try await apiV1VideosIdCommentThreadsPostWithRequestBuilder(id: id, apiV1VideosIdCommentThreadsPostRequest: apiV1VideosIdCommentThreadsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a thread
     - POST /api/v1/videos/{id}/comment-threads
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func apiV1VideosIdCommentThreadsPostWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CommentThreadPostResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1VideosIdCommentThreadsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a thread
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoCommentThreadTree
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentThreadsThreadIdGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, threadId: Int, xPeertubeVideoPassword: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoCommentThreadTree {
        return try await apiV1VideosIdCommentThreadsThreadIdGetWithRequestBuilder(id: id, threadId: threadId, xPeertubeVideoPassword: xPeertubeVideoPassword, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get a thread
     - GET /api/v1/videos/{id}/comment-threads/{threadId}
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoCommentThreadTree> 
     */
    open class func apiV1VideosIdCommentThreadsThreadIdGetWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, threadId: Int, xPeertubeVideoPassword: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoCommentThreadTree> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads/{threadId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoCommentThreadTree>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Approve a comment
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentsCommentIdApprovePost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1VideosIdCommentsCommentIdApprovePostWithRequestBuilder(id: id, commentId: commentId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Approve a comment
     - POST /api/v1/videos/{id}/comments/{commentId}/approve
     - **PeerTube >= 6.2** Approve a comment that requires a review
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideosIdCommentsCommentIdApprovePostWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/videos/{id}/comments/{commentId}/approve"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a comment or a reply
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentsCommentIdDelete(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1VideosIdCommentsCommentIdDeleteWithRequestBuilder(id: id, commentId: commentId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a comment or a reply
     - DELETE /api/v1/videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideosIdCommentsCommentIdDeleteWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Reply to a thread of a video
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CommentThreadPostResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideosIdCommentsCommentIdPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, xPeertubeVideoPassword: String? = nil, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CommentThreadPostResponse {
        return try await apiV1VideosIdCommentsCommentIdPostWithRequestBuilder(id: id, commentId: commentId, xPeertubeVideoPassword: xPeertubeVideoPassword, apiV1VideosIdCommentThreadsPostRequest: apiV1VideosIdCommentThreadsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Reply to a thread of a video
     - POST /api/v1/videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func apiV1VideosIdCommentsCommentIdPostWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, xPeertubeVideoPassword: String? = nil, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CommentThreadPostResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1VideosIdCommentThreadsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
