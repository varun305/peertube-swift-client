//
// VideoPlaylistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoPlaylistsAPI {

    /**
     Create a video playlist
     
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AddPlaylist200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addPlaylist(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AddPlaylist200Response {
        return try await addPlaylistWithRequestBuilder(displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a video playlist
     - POST /api/v1/video-playlists
     - If the video playlist is set as public, `videoChannelId` is mandatory.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AddPlaylist200Response> 
     */
    open class func addPlaylistWithRequestBuilder(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AddPlaylist200Response> {
        let localVariablePath = "/api/v1/video-playlists"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "displayName": displayName.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "thumbnailfile": thumbnailfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "privacy": privacy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "description": description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "videoChannelId": videoChannelId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddPlaylist200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add a video in a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter addVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AddVideoPlaylistVideo200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addVideoPlaylistVideo(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AddVideoPlaylistVideo200Response {
        return try await addVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, addVideoPlaylistVideoRequest: addVideoPlaylistVideoRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add a video in a playlist
     - POST /api/v1/video-playlists/{playlistId}/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter addVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AddVideoPlaylistVideo200Response> 
     */
    open class func addVideoPlaylistVideoWithRequestBuilder(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AddVideoPlaylistVideo200Response> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addVideoPlaylistVideoRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddVideoPlaylistVideo200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List playlists of an account
     
     - parameter name: (path) The username or handle of the account 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1AccountsNameVideoPlaylistsGet(name: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, search: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response {
        return try await apiV1AccountsNameVideoPlaylistsGetWithRequestBuilder(name: name, start: start, count: count, sort: sort, search: search, playlistType: playlistType, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List playlists of an account
     - GET /api/v1/accounts/{name}/video-playlists
     - parameter name: (path) The username or handle of the account 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func apiV1AccountsNameVideoPlaylistsGetWithRequestBuilder(name: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, search: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        var localVariablePath = "/api/v1/accounts/{name}/video-playlists"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Check video exists in my playlists
     
     - parameter videoIds: (query) The video ids to check 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1UsersMeVideoPlaylistsVideosExistGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1UsersMeVideoPlaylistsVideosExistGet(videoIds: [Int], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1UsersMeVideoPlaylistsVideosExistGet200Response {
        return try await apiV1UsersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: videoIds, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Check video exists in my playlists
     - GET /api/v1/users/me/video-playlists/videos-exist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter videoIds: (query) The video ids to check 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response> 
     */
    open class func apiV1UsersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: [Int], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response> {
        let localVariablePath = "/api/v1/users/me/video-playlists/videos-exist"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoIds": (wrappedValue: videoIds.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List playlists of a channel
     
     - parameter channelHandle: (path) The video channel handle 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideoChannelsChannelHandleVideoPlaylistsGet(channelHandle: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response {
        return try await apiV1VideoChannelsChannelHandleVideoPlaylistsGetWithRequestBuilder(channelHandle: channelHandle, start: start, count: count, sort: sort, playlistType: playlistType, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List playlists of a channel
     - GET /api/v1/video-channels/{channelHandle}/video-playlists
     - parameter channelHandle: (path) The video channel handle 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func apiV1VideoChannelsChannelHandleVideoPlaylistsGetWithRequestBuilder(channelHandle: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        var localVariablePath = "/api/v1/video-channels/{channelHandle}/video-playlists"
        let channelHandlePreEscape = "\(APIHelper.mapValueToPathItem(channelHandle))"
        let channelHandlePostEscape = channelHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channelHandle}", with: channelHandlePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideoPlaylistsPlaylistIdDelete(playlistId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1VideoPlaylistsPlaylistIdDeleteWithRequestBuilder(playlistId: playlistId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a video playlist
     - DELETE /api/v1/video-playlists/{playlistId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdDeleteWithRequestBuilder(playlistId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoPlaylist
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideoPlaylistsPlaylistIdGet(playlistId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoPlaylist {
        return try await apiV1VideoPlaylistsPlaylistIdGetWithRequestBuilder(playlistId: playlistId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get a video playlist
     - GET /api/v1/video-playlists/{playlistId}
     - parameter playlistId: (path) Playlist id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoPlaylist> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdGetWithRequestBuilder(playlistId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoPlaylist> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoPlaylist>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Update a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1VideoPlaylistsPlaylistIdPut(playlistId: Int, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1VideoPlaylistsPlaylistIdPutWithRequestBuilder(playlistId: playlistId, displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a video playlist
     - PUT /api/v1/video-playlists/{playlistId}
     - If the video playlist is set as public, the playlist must have a assigned channel.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdPutWithRequestBuilder(playlistId: Int, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "displayName": displayName?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "thumbnailfile": thumbnailfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "privacy": privacy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "description": description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "videoChannelId": videoChannelId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an element from a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func delVideoPlaylistVideo(playlistId: Int, playlistElementId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await delVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, playlistElementId: playlistElementId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an element from a playlist
     - DELETE /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func delVideoPlaylistVideoWithRequestBuilder(playlistId: Int, playlistElementId: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List available playlist privacy policies
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [String]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaylistPrivacyPolicies(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> [String] {
        return try await getPlaylistPrivacyPoliciesWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List available playlist privacy policies
     - GET /api/v1/video-playlists/privacies
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[String]> 
     */
    open class func getPlaylistPrivacyPoliciesWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<[String]> {
        let localVariablePath = "/api/v1/video-playlists/privacies"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List video playlists
     
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaylists(start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response {
        return try await getPlaylistsWithRequestBuilder(start: start, count: count, sort: sort, playlistType: playlistType, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List video playlists
     - GET /api/v1/video-playlists
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func getPlaylistsWithRequestBuilder(start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        let localVariablePath = "/api/v1/video-playlists"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List videos of a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getVideoPlaylistVideos(playlistId: Int, start: Int? = nil, count: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoListResponse {
        return try await getVideoPlaylistVideosWithRequestBuilder(playlistId: playlistId, start: start, count: count, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List videos of a playlist
     - GET /api/v1/video-playlists/{playlistId}/videos
     - parameter playlistId: (path) Playlist id 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func getVideoPlaylistVideosWithRequestBuilder(playlistId: Int, start: Int? = nil, count: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoListResponse> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoListResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Update a playlist element
     
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter putVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func putVideoPlaylistVideo(playlistId: Int, playlistElementId: Int, putVideoPlaylistVideoRequest: PutVideoPlaylistVideoRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await putVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, playlistElementId: playlistElementId, putVideoPlaylistVideoRequest: putVideoPlaylistVideoRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a playlist element
     - PUT /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter putVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func putVideoPlaylistVideoWithRequestBuilder(playlistId: Int, playlistElementId: Int, putVideoPlaylistVideoRequest: PutVideoPlaylistVideoRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putVideoPlaylistVideoRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Reorder a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter reorderVideoPlaylistRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reorderVideoPlaylist(playlistId: Int, reorderVideoPlaylistRequest: ReorderVideoPlaylistRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await reorderVideoPlaylistWithRequestBuilder(playlistId: playlistId, reorderVideoPlaylistRequest: reorderVideoPlaylistRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Reorder a playlist
     - POST /api/v1/video-playlists/{playlistId}/videos/reorder
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter reorderVideoPlaylistRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func reorderVideoPlaylistWithRequestBuilder(playlistId: Int, reorderVideoPlaylistRequest: ReorderVideoPlaylistRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/reorder"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reorderVideoPlaylistRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter searchTarget
     */
    public enum SearchTarget_searchPlaylists: String, Sendable, CaseIterable {
        case local = "local"
        case searchIndex = "search-index"
    }

    /**
     Search playlists
     
     - parameter search: (query) String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete playlist information and interact with it.  
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter searchTarget: (query) If the administrator enabled search index support, you can override the default search target.  **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:   * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),   then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.   After that, you can use the classic REST API endpoints to fetch the complete object or interact with it   * If the current user doesn&#39;t have the ability to make a remote URI search, then redirect the user on the origin instance or fetch   the data from the origin instance API  (optional)
     - parameter sort: (query) Sort column (optional)
     - parameter host: (query) Find elements owned by this host (optional)
     - parameter uuids: (query) Find elements with specific UUIDs (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchPlaylists(search: String, start: Int? = nil, count: Int? = nil, searchTarget: SearchTarget_searchPlaylists? = nil, sort: String? = nil, host: String? = nil, uuids: [String]? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response {
        return try await searchPlaylistsWithRequestBuilder(search: search, start: start, count: count, searchTarget: searchTarget, sort: sort, host: host, uuids: uuids, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Search playlists
     - GET /api/v1/search/video-playlists
     - parameter search: (query) String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete playlist information and interact with it.  
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter searchTarget: (query) If the administrator enabled search index support, you can override the default search target.  **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:   * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),   then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.   After that, you can use the classic REST API endpoints to fetch the complete object or interact with it   * If the current user doesn&#39;t have the ability to make a remote URI search, then redirect the user on the origin instance or fetch   the data from the origin instance API  (optional)
     - parameter sort: (query) Sort column (optional)
     - parameter host: (query) Find elements owned by this host (optional)
     - parameter uuids: (query) Find elements with specific UUIDs (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func searchPlaylistsWithRequestBuilder(search: String, start: Int? = nil, count: Int? = nil, searchTarget: SearchTarget_searchPlaylists? = nil, sort: String? = nil, host: String? = nil, uuids: [String]? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        let localVariablePath = "/api/v1/search/video-playlists"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchTarget": (wrappedValue: searchTarget?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "host": (wrappedValue: host?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "uuids": (wrappedValue: uuids?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
