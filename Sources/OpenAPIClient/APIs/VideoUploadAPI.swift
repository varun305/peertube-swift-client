//
// VideoUploadAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoUploadAPI {

    /**
     Import a video
     
     - parameter name: (form) Video name 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter targetUrl: (form) remote URL where to find the import&#39;s source video (optional)
     - parameter magnetUri: (form) magnet URI allowing to resolve the import&#39;s source video (optional)
     - parameter torrentfile: (form) Torrent file containing only the video file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter generateTranscription: (form) **PeerTube &gt;&#x3D; 6.2** If enabled by the admin, automatically generate a subtitle of the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Deprecated in 6.2, use commentsPolicy instead (optional)
     - parameter commentsPolicy: (form)  (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter videoPasswords: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoUploadResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func importVideo(name: String, channelId: Int, targetUrl: String? = nil, magnetUri: String? = nil, torrentfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, generateTranscription: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, commentsPolicy: VideoCommentsPolicySet? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, videoPasswords: Set<String>? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoUploadResponse {
        return try await importVideoWithRequestBuilder(name: name, channelId: channelId, targetUrl: targetUrl, magnetUri: magnetUri, torrentfile: torrentfile, privacy: privacy, category: category, licence: licence, language: language, description: description, waitTranscoding: waitTranscoding, generateTranscription: generateTranscription, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, commentsPolicy: commentsPolicy, downloadEnabled: downloadEnabled, originallyPublishedAt: originallyPublishedAt, scheduleUpdate: scheduleUpdate, thumbnailfile: thumbnailfile, previewfile: previewfile, videoPasswords: videoPasswords, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Import a video
     - POST /api/v1/videos/imports
     - Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter name: (form) Video name 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter targetUrl: (form) remote URL where to find the import&#39;s source video (optional)
     - parameter magnetUri: (form) magnet URI allowing to resolve the import&#39;s source video (optional)
     - parameter torrentfile: (form) Torrent file containing only the video file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter generateTranscription: (form) **PeerTube &gt;&#x3D; 6.2** If enabled by the admin, automatically generate a subtitle of the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Deprecated in 6.2, use commentsPolicy instead (optional)
     - parameter commentsPolicy: (form)  (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter videoPasswords: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func importVideoWithRequestBuilder(name: String, channelId: Int, targetUrl: String? = nil, magnetUri: String? = nil, torrentfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, generateTranscription: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, commentsPolicy: VideoCommentsPolicySet? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, videoPasswords: Set<String>? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoUploadResponse> {
        let localVariablePath = "/api/v1/videos/imports"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "targetUrl": targetUrl?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "magnetUri": magnetUri?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "torrentfile": torrentfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "name": name.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "channelId": channelId.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "privacy": privacy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "category": category?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "licence": licence?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "language": language?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "description": description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "waitTranscoding": waitTranscoding?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "generateTranscription": generateTranscription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "support": support?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "nsfw": nsfw?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "tags": tags?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "commentsEnabled": commentsEnabled?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "commentsPolicy": commentsPolicy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "downloadEnabled": downloadEnabled?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "originallyPublishedAt": originallyPublishedAt?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "scheduleUpdate": scheduleUpdate?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "thumbnailfile": thumbnailfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "previewfile": previewfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "videoPasswords": videoPasswords?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoUploadResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send chunk for the resumable replacement of a video
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func replaceVideoSourceResumable(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await replaceVideoSourceResumableWithRequestBuilder(uploadId: uploadId, contentRange: contentRange, contentLength: contentLength, body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Send chunk for the resumable replacement of a video
     - PUT /api/v1/videos/{id}/source/replace-resumable
     - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the replacement of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func replaceVideoSourceResumableWithRequestBuilder(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/videos/{id}/source/replace-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
            "Content-Range": contentRange.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Cancel the resumable replacement of a video
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func replaceVideoSourceResumableCancel(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await replaceVideoSourceResumableCancelWithRequestBuilder(uploadId: uploadId, contentLength: contentLength, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Cancel the resumable replacement of a video
     - DELETE /api/v1/videos/{id}/source/replace-resumable
     - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the replacement of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - responseHeaders: [Content-Length(Double)]
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func replaceVideoSourceResumableCancelWithRequestBuilder(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/videos/{id}/source/replace-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize the resumable replacement of a video
     
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter videoReplaceSourceRequestResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func replaceVideoSourceResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoReplaceSourceRequestResumable: VideoReplaceSourceRequestResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await replaceVideoSourceResumableInitWithRequestBuilder(xUploadContentLength: xUploadContentLength, xUploadContentType: xUploadContentType, videoReplaceSourceRequestResumable: videoReplaceSourceRequestResumable, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize the resumable replacement of a video
     - POST /api/v1/videos/{id}/source/replace-resumable
     - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the replacement of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter videoReplaceSourceRequestResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func replaceVideoSourceResumableInitWithRequestBuilder(xUploadContentLength: Double, xUploadContentType: String, videoReplaceSourceRequestResumable: VideoReplaceSourceRequestResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/videos/{id}/source/replace-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: videoReplaceSourceRequestResumable, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Upload-Content-Length": xUploadContentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "X-Upload-Content-Type": xUploadContentType.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upload a video
     
     - parameter name: (form) Video name 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter videofile: (form) Video file 
     - parameter privacy: (form)  (optional)
     - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter generateTranscription: (form) **PeerTube &gt;&#x3D; 6.2** If enabled by the admin, automatically generate a subtitle of the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Deprecated in 6.2, use commentsPolicy instead (optional)
     - parameter commentsPolicy: (form)  (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter videoPasswords: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoUploadResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uploadLegacy(name: String, channelId: Int, videofile: URL, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, generateTranscription: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, commentsPolicy: VideoCommentsPolicySet? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, videoPasswords: Set<String>? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoUploadResponse {
        return try await uploadLegacyWithRequestBuilder(name: name, channelId: channelId, videofile: videofile, privacy: privacy, category: category, licence: licence, language: language, description: description, waitTranscoding: waitTranscoding, generateTranscription: generateTranscription, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, commentsPolicy: commentsPolicy, downloadEnabled: downloadEnabled, originallyPublishedAt: originallyPublishedAt, scheduleUpdate: scheduleUpdate, thumbnailfile: thumbnailfile, previewfile: previewfile, videoPasswords: videoPasswords, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Upload a video
     - POST /api/v1/videos/upload
     - Uses a single request to upload a video.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter name: (form) Video name 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter videofile: (form) Video file 
     - parameter privacy: (form)  (optional)
     - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
     - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
     - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter generateTranscription: (form) **PeerTube &gt;&#x3D; 6.2** If enabled by the admin, automatically generate a subtitle of the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Deprecated in 6.2, use commentsPolicy instead (optional)
     - parameter commentsPolicy: (form)  (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter videoPasswords: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func uploadLegacyWithRequestBuilder(name: String, channelId: Int, videofile: URL, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, generateTranscription: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, commentsPolicy: VideoCommentsPolicySet? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, videoPasswords: Set<String>? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoUploadResponse> {
        let localVariablePath = "/api/v1/videos/upload"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "name": name.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "channelId": channelId.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "privacy": privacy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "category": category?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "licence": licence?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "language": language?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "description": description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "waitTranscoding": waitTranscoding?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "generateTranscription": generateTranscription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "support": support?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "nsfw": nsfw?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "tags": tags?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "commentsEnabled": commentsEnabled?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "commentsPolicy": commentsPolicy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "downloadEnabled": downloadEnabled?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "originallyPublishedAt": originallyPublishedAt?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "scheduleUpdate": scheduleUpdate?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "thumbnailfile": thumbnailfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "previewfile": previewfile?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "videoPasswords": videoPasswords?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "videofile": videofile.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoUploadResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send chunk for the resumable upload of a video
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoUploadResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uploadResumable(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoUploadResponse {
        return try await uploadResumableWithRequestBuilder(uploadId: uploadId, contentRange: contentRange, contentLength: contentLength, body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Send chunk for the resumable upload of a video
     - PUT /api/v1/videos/upload-resumable
     - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - responseHeaders: [Content-Length(Double)]
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
     - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
     - parameter body: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func uploadResumableWithRequestBuilder(uploadId: String, contentRange: String, contentLength: Double, body: URL? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoUploadResponse> {
        let localVariablePath = "/api/v1/videos/upload-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
            "Content-Range": contentRange.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoUploadResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Cancel the resumable upload of a video, deleting any data uploaded so far
     
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uploadResumableCancel(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await uploadResumableCancelWithRequestBuilder(uploadId: uploadId, contentLength: contentLength, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Cancel the resumable upload of a video, deleting any data uploaded so far
     - DELETE /api/v1/videos/upload-resumable
     - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - responseHeaders: [Content-Length(Double)]
     - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
     - parameter contentLength: (header)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func uploadResumableCancelWithRequestBuilder(uploadId: String, contentLength: Double, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/videos/upload-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "upload_id": (wrappedValue: uploadId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Length": contentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize the resumable upload of a video
     
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter videoUploadRequestResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uploadResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoUploadRequestResumable: VideoUploadRequestResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await uploadResumableInitWithRequestBuilder(xUploadContentLength: xUploadContentLength, xUploadContentType: xUploadContentType, videoUploadRequestResumable: videoUploadRequestResumable, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize the resumable upload of a video
     - POST /api/v1/videos/upload-resumable
     - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
     - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
     - parameter videoUploadRequestResumable: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func uploadResumableInitWithRequestBuilder(xUploadContentLength: Double, xUploadContentType: String, videoUploadRequestResumable: VideoUploadRequestResumable? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/videos/upload-resumable"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: videoUploadRequestResumable, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Upload-Content-Length": xUploadContentLength.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "X-Upload-Content-Type": xUploadContentType.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
