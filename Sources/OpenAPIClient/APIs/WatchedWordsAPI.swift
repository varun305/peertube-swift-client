//
// WatchedWordsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class WatchedWordsAPI {

    /**
     List account watched words
     
     - parameter accountName: (path) account name to list watched words 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1WatchedWordsAccountsAccountNameListsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsAccountsAccountNameListsGet(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1WatchedWordsAccountsAccountNameListsGet200Response {
        return try await apiV1WatchedWordsAccountsAccountNameListsGetWithRequestBuilder(accountName: accountName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List account watched words
     - GET /api/v1/watched-words/accounts/{accountName}/lists
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path) account name to list watched words 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response> 
     */
    open class func apiV1WatchedWordsAccountsAccountNameListsGetWithRequestBuilder(accountName: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response> {
        var localVariablePath = "/api/v1/watched-words/accounts/{accountName}/lists"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete account watched words
     
     - parameter accountName: (path)  
     - parameter listId: (path) list of watched words to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsAccountsAccountNameListsListIdDelete(accountName: String, listId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1WatchedWordsAccountsAccountNameListsListIdDeleteWithRequestBuilder(accountName: accountName, listId: listId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete account watched words
     - DELETE /api/v1/watched-words/accounts/{accountName}/lists/{listId}
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path)  
     - parameter listId: (path) list of watched words to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1WatchedWordsAccountsAccountNameListsListIdDeleteWithRequestBuilder(accountName: String, listId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/watched-words/accounts/{accountName}/lists/{listId}"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update account watched words
     
     - parameter accountName: (path)  
     - parameter listId: (path) list of watched words to update 
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsAccountsAccountNameListsListIdPut(accountName: String, listId: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1WatchedWordsAccountsAccountNameListsListIdPutWithRequestBuilder(accountName: accountName, listId: listId, apiV1WatchedWordsAccountsAccountNameListsPostRequest: apiV1WatchedWordsAccountsAccountNameListsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update account watched words
     - PUT /api/v1/watched-words/accounts/{accountName}/lists/{listId}
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path)  
     - parameter listId: (path) list of watched words to update 
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1WatchedWordsAccountsAccountNameListsListIdPutWithRequestBuilder(accountName: String, listId: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/watched-words/accounts/{accountName}/lists/{listId}"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1WatchedWordsAccountsAccountNameListsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add account watched words
     
     - parameter accountName: (path)  
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1WatchedWordsAccountsAccountNameListsPost200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsAccountsAccountNameListsPost(accountName: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1WatchedWordsAccountsAccountNameListsPost200Response {
        return try await apiV1WatchedWordsAccountsAccountNameListsPostWithRequestBuilder(accountName: accountName, apiV1WatchedWordsAccountsAccountNameListsPostRequest: apiV1WatchedWordsAccountsAccountNameListsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add account watched words
     - POST /api/v1/watched-words/accounts/{accountName}/lists
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter accountName: (path)  
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response> 
     */
    open class func apiV1WatchedWordsAccountsAccountNameListsPostWithRequestBuilder(accountName: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response> {
        var localVariablePath = "/api/v1/watched-words/accounts/{accountName}/lists"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1WatchedWordsAccountsAccountNameListsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List server watched words
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1WatchedWordsAccountsAccountNameListsGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsServerListsGet(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1WatchedWordsAccountsAccountNameListsGet200Response {
        return try await apiV1WatchedWordsServerListsGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List server watched words
     - GET /api/v1/watched-words/server/lists
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response> 
     */
    open class func apiV1WatchedWordsServerListsGetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response> {
        let localVariablePath = "/api/v1/watched-words/server/lists"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsGet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete server watched words
     
     - parameter listId: (path) list of watched words to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsServerListsListIdDelete(listId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1WatchedWordsServerListsListIdDeleteWithRequestBuilder(listId: listId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete server watched words
     - DELETE /api/v1/watched-words/server/lists/{listId}
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter listId: (path) list of watched words to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1WatchedWordsServerListsListIdDeleteWithRequestBuilder(listId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/watched-words/server/lists/{listId}"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update server watched words
     
     - parameter listId: (path) list of watched words to update 
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsServerListsListIdPut(listId: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV1WatchedWordsServerListsListIdPutWithRequestBuilder(listId: listId, apiV1WatchedWordsAccountsAccountNameListsPostRequest: apiV1WatchedWordsAccountsAccountNameListsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update server watched words
     - PUT /api/v1/watched-words/server/lists/{listId}
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter listId: (path) list of watched words to update 
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1WatchedWordsServerListsListIdPutWithRequestBuilder(listId: String, apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/watched-words/server/lists/{listId}"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1WatchedWordsAccountsAccountNameListsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add server watched words
     
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiV1WatchedWordsAccountsAccountNameListsPost200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1WatchedWordsServerListsPost(apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiV1WatchedWordsAccountsAccountNameListsPost200Response {
        return try await apiV1WatchedWordsServerListsPostWithRequestBuilder(apiV1WatchedWordsAccountsAccountNameListsPostRequest: apiV1WatchedWordsAccountsAccountNameListsPostRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add server watched words
     - POST /api/v1/watched-words/server/lists
     - **PeerTube >= 6.2**
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiV1WatchedWordsAccountsAccountNameListsPostRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response> 
     */
    open class func apiV1WatchedWordsServerListsPostWithRequestBuilder(apiV1WatchedWordsAccountsAccountNameListsPostRequest: ApiV1WatchedWordsAccountsAccountNameListsPostRequest? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response> {
        let localVariablePath = "/api/v1/watched-words/server/lists"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1WatchedWordsAccountsAccountNameListsPostRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1WatchedWordsAccountsAccountNameListsPost200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
