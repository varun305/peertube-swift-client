//
// Abuse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Abuse: Sendable, Codable, JSONEncodable, Hashable {

    public enum PredefinedReasons: String, Sendable, Codable, CaseIterable {
        case violentorabusive = "violentOrAbusive"
        case hatefulorabusive = "hatefulOrAbusive"
        case spamormisleading = "spamOrMisleading"
        case privacy = "privacy"
        case rights = "rights"
        case serverrules = "serverRules"
        case thumbnails = "thumbnails"
        case captions = "captions"
    }
    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let reasonRule = StringRule(minLength: 2, maxLength: 3000, pattern: nil)
    public static let moderationCommentRule = StringRule(minLength: 2, maxLength: 3000, pattern: nil)
    public var id: Int?
    public var reason: String?
    public var predefinedReasons: [PredefinedReasons]?
    public var reporterAccount: Account?
    public var state: AbuseStateConstant?
    public var moderationComment: String?
    public var video: VideoInfo?
    public var createdAt: Date?

    public init(id: Int? = nil, reason: String? = nil, predefinedReasons: [PredefinedReasons]? = nil, reporterAccount: Account? = nil, state: AbuseStateConstant? = nil, moderationComment: String? = nil, video: VideoInfo? = nil, createdAt: Date? = nil) {
        self.id = id
        self.reason = reason
        self.predefinedReasons = predefinedReasons
        self.reporterAccount = reporterAccount
        self.state = state
        self.moderationComment = moderationComment
        self.video = video
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case reason
        case predefinedReasons
        case reporterAccount
        case state
        case moderationComment
        case video
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(predefinedReasons, forKey: .predefinedReasons)
        try container.encodeIfPresent(reporterAccount, forKey: .reporterAccount)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(moderationComment, forKey: .moderationComment)
        try container.encodeIfPresent(video, forKey: .video)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Abuse: Identifiable {}
