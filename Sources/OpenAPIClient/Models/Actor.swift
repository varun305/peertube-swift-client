//
// Actor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Actor: Sendable, Codable, JSONEncodable, Hashable {

    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let nameRule = StringRule(minLength: 1, maxLength: 50, pattern: "/^[a-z0-9._]+$/")
    public static let followingCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let followersCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int?
    public var url: String?
    /** immutable name of the actor, used to find or mention it */
    public var name: String?
    public var avatars: [ActorImage]?
    /** server on which the actor is resident */
    public var host: String?
    /** whether this actor's host allows redundancy of its videos */
    public var hostRedundancyAllowed: Bool?
    /** number of actors subscribed to by this actor, as seen by this instance */
    public var followingCount: Int?
    /** number of followers of this actor, as seen by this instance */
    public var followersCount: Int?
    public var createdAt: Date?
    public var updatedAt: Date?

    public init(id: Int? = nil, url: String? = nil, name: String? = nil, avatars: [ActorImage]? = nil, host: String? = nil, hostRedundancyAllowed: Bool? = nil, followingCount: Int? = nil, followersCount: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.url = url
        self.name = name
        self.avatars = avatars
        self.host = host
        self.hostRedundancyAllowed = hostRedundancyAllowed
        self.followingCount = followingCount
        self.followersCount = followersCount
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case url
        case name
        case avatars
        case host
        case hostRedundancyAllowed
        case followingCount
        case followersCount
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(avatars, forKey: .avatars)
        try container.encodeIfPresent(host, forKey: .host)
        try container.encodeIfPresent(hostRedundancyAllowed, forKey: .hostRedundancyAllowed)
        try container.encodeIfPresent(followingCount, forKey: .followingCount)
        try container.encodeIfPresent(followersCount, forKey: .followersCount)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Actor: Identifiable {}
