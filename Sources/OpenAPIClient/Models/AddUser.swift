//
// AddUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AddUser: Sendable, Codable, JSONEncodable, Hashable {

    public static let usernameRule = StringRule(minLength: 1, maxLength: 50, pattern: "/^[a-z0-9._]+$/")
    public static let passwordRule = StringRule(minLength: 6, maxLength: 255, pattern: nil)
    public static let channelNameRule = StringRule(minLength: 1, maxLength: 50, pattern: "/^[a-zA-Z0-9\\\\-_.:]+$/")
    /** immutable name of the user, used to find or mention its actor */
    public var username: String
    public var password: String
    /** The user email */
    public var email: String
    /** The user video quota in bytes */
    public var videoQuota: Int?
    /** The user daily video quota in bytes */
    public var videoQuotaDaily: Int?
    /** immutable name of the channel, used to interact with its actor */
    public var channelName: String?
    public var role: UserRole
    public var adminFlags: UserAdminFlags?

    public init(username: String, password: String, email: String, videoQuota: Int? = nil, videoQuotaDaily: Int? = nil, channelName: String? = nil, role: UserRole, adminFlags: UserAdminFlags? = nil) {
        self.username = username
        self.password = password
        self.email = email
        self.videoQuota = videoQuota
        self.videoQuotaDaily = videoQuotaDaily
        self.channelName = channelName
        self.role = role
        self.adminFlags = adminFlags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case password
        case email
        case videoQuota
        case videoQuotaDaily
        case channelName
        case role
        case adminFlags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(username, forKey: .username)
        try container.encode(password, forKey: .password)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(videoQuota, forKey: .videoQuota)
        try container.encodeIfPresent(videoQuotaDaily, forKey: .videoQuotaDaily)
        try container.encodeIfPresent(channelName, forKey: .channelName)
        try container.encode(role, forKey: .role)
        try container.encodeIfPresent(adminFlags, forKey: .adminFlags)
    }
}

