//
// ApiV1RunnersJobsJobUUIDUpdatePostRequestPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Provide live transcoding chunks update */
public struct ApiV1RunnersJobsJobUUIDUpdatePostRequestPayload: Sendable, Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Sendable, Codable, CaseIterable {
        case addChunk = "add-chunk"
        case removeChunk = "remove-chunk"
    }
    public var type: ModelType?
    public var masterPlaylistFile: URL?
    public var resolutionPlaylistFile: URL?
    public var resolutionPlaylistFilename: String?
    public var videoChunkFile: URL?
    public var videoChunkFilename: String?

    public init(type: ModelType? = nil, masterPlaylistFile: URL? = nil, resolutionPlaylistFile: URL? = nil, resolutionPlaylistFilename: String? = nil, videoChunkFile: URL? = nil, videoChunkFilename: String? = nil) {
        self.type = type
        self.masterPlaylistFile = masterPlaylistFile
        self.resolutionPlaylistFile = resolutionPlaylistFile
        self.resolutionPlaylistFilename = resolutionPlaylistFilename
        self.videoChunkFile = videoChunkFile
        self.videoChunkFilename = videoChunkFilename
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case masterPlaylistFile
        case resolutionPlaylistFile
        case resolutionPlaylistFilename
        case videoChunkFile
        case videoChunkFilename
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(masterPlaylistFile, forKey: .masterPlaylistFile)
        try container.encodeIfPresent(resolutionPlaylistFile, forKey: .resolutionPlaylistFile)
        try container.encodeIfPresent(resolutionPlaylistFilename, forKey: .resolutionPlaylistFilename)
        try container.encodeIfPresent(videoChunkFile, forKey: .videoChunkFile)
        try container.encodeIfPresent(videoChunkFilename, forKey: .videoChunkFilename)
    }
}

