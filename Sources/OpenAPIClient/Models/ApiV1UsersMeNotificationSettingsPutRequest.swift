//
// ApiV1UsersMeNotificationSettingsPutRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ApiV1UsersMeNotificationSettingsPutRequest: Sendable, Codable, JSONEncodable, Hashable {

    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var abuseAsModerator: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var videoAutoBlacklistAsModerator: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newUserRegistration: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newVideoFromSubscription: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var blacklistOnMyVideo: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoPublished: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoImportFinished: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var commentMention: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newCommentOnMyVideo: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newFollow: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newInstanceFollower: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var autoInstanceFollowing: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var abuseStateChange: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var abuseNewMessage: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newPeerTubeVersion: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newPluginVersion: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoStudioEditionFinished: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoTranscriptionGenerated: Int?

    public init(abuseAsModerator: Int? = nil, videoAutoBlacklistAsModerator: Int? = nil, newUserRegistration: Int? = nil, newVideoFromSubscription: Int? = nil, blacklistOnMyVideo: Int? = nil, myVideoPublished: Int? = nil, myVideoImportFinished: Int? = nil, commentMention: Int? = nil, newCommentOnMyVideo: Int? = nil, newFollow: Int? = nil, newInstanceFollower: Int? = nil, autoInstanceFollowing: Int? = nil, abuseStateChange: Int? = nil, abuseNewMessage: Int? = nil, newPeerTubeVersion: Int? = nil, newPluginVersion: Int? = nil, myVideoStudioEditionFinished: Int? = nil, myVideoTranscriptionGenerated: Int? = nil) {
        self.abuseAsModerator = abuseAsModerator
        self.videoAutoBlacklistAsModerator = videoAutoBlacklistAsModerator
        self.newUserRegistration = newUserRegistration
        self.newVideoFromSubscription = newVideoFromSubscription
        self.blacklistOnMyVideo = blacklistOnMyVideo
        self.myVideoPublished = myVideoPublished
        self.myVideoImportFinished = myVideoImportFinished
        self.commentMention = commentMention
        self.newCommentOnMyVideo = newCommentOnMyVideo
        self.newFollow = newFollow
        self.newInstanceFollower = newInstanceFollower
        self.autoInstanceFollowing = autoInstanceFollowing
        self.abuseStateChange = abuseStateChange
        self.abuseNewMessage = abuseNewMessage
        self.newPeerTubeVersion = newPeerTubeVersion
        self.newPluginVersion = newPluginVersion
        self.myVideoStudioEditionFinished = myVideoStudioEditionFinished
        self.myVideoTranscriptionGenerated = myVideoTranscriptionGenerated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case abuseAsModerator
        case videoAutoBlacklistAsModerator
        case newUserRegistration
        case newVideoFromSubscription
        case blacklistOnMyVideo
        case myVideoPublished
        case myVideoImportFinished
        case commentMention
        case newCommentOnMyVideo
        case newFollow
        case newInstanceFollower
        case autoInstanceFollowing
        case abuseStateChange
        case abuseNewMessage
        case newPeerTubeVersion
        case newPluginVersion
        case myVideoStudioEditionFinished
        case myVideoTranscriptionGenerated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(abuseAsModerator, forKey: .abuseAsModerator)
        try container.encodeIfPresent(videoAutoBlacklistAsModerator, forKey: .videoAutoBlacklistAsModerator)
        try container.encodeIfPresent(newUserRegistration, forKey: .newUserRegistration)
        try container.encodeIfPresent(newVideoFromSubscription, forKey: .newVideoFromSubscription)
        try container.encodeIfPresent(blacklistOnMyVideo, forKey: .blacklistOnMyVideo)
        try container.encodeIfPresent(myVideoPublished, forKey: .myVideoPublished)
        try container.encodeIfPresent(myVideoImportFinished, forKey: .myVideoImportFinished)
        try container.encodeIfPresent(commentMention, forKey: .commentMention)
        try container.encodeIfPresent(newCommentOnMyVideo, forKey: .newCommentOnMyVideo)
        try container.encodeIfPresent(newFollow, forKey: .newFollow)
        try container.encodeIfPresent(newInstanceFollower, forKey: .newInstanceFollower)
        try container.encodeIfPresent(autoInstanceFollowing, forKey: .autoInstanceFollowing)
        try container.encodeIfPresent(abuseStateChange, forKey: .abuseStateChange)
        try container.encodeIfPresent(abuseNewMessage, forKey: .abuseNewMessage)
        try container.encodeIfPresent(newPeerTubeVersion, forKey: .newPeerTubeVersion)
        try container.encodeIfPresent(newPluginVersion, forKey: .newPluginVersion)
        try container.encodeIfPresent(myVideoStudioEditionFinished, forKey: .myVideoStudioEditionFinished)
        try container.encodeIfPresent(myVideoTranscriptionGenerated, forKey: .myVideoTranscriptionGenerated)
    }
}

