//
// GetUser200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public enum GetUser200Response: Sendable, Codable, JSONEncodable, Hashable {
    case typeUser(User)
    case typeUserWithStats(UserWithStats)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeUser(let value):
            try container.encode(value)
        case .typeUserWithStats(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(User.self) {
            self = .typeUser(value)
        } else if let value = try? container.decode(UserWithStats.self) {
            self = .typeUserWithStats(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of GetUser200Response"))
        }
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension GetUser200Response: Identifiable {
    public var id: Int {
        self.hashValue
    }
}
