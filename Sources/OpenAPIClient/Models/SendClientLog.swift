//
// SendClientLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SendClientLog: Sendable, Codable, JSONEncodable, Hashable {

    public enum Level: String, Sendable, Codable, CaseIterable {
        case error = "error"
        case warn = "warn"
    }
    public var message: String
    /** URL of the current user page */
    public var url: String
    public var level: Level
    /** Stack trace of the error if there is one */
    public var stackTrace: String?
    /** User agent of the web browser that sends the message */
    public var userAgent: String?
    /** Additional information regarding this log */
    public var meta: String?

    public init(message: String, url: String, level: Level, stackTrace: String? = nil, userAgent: String? = nil, meta: String? = nil) {
        self.message = message
        self.url = url
        self.level = level
        self.stackTrace = stackTrace
        self.userAgent = userAgent
        self.meta = meta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case message
        case url
        case level
        case stackTrace
        case userAgent
        case meta
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(message, forKey: .message)
        try container.encode(url, forKey: .url)
        try container.encode(level, forKey: .level)
        try container.encodeIfPresent(stackTrace, forKey: .stackTrace)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(meta, forKey: .meta)
    }
}

