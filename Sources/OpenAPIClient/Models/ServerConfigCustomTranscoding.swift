//
// ServerConfigCustomTranscoding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Settings pertaining to transcoding jobs */
public struct ServerConfigCustomTranscoding: Sendable, Codable, JSONEncodable, Hashable {

    public enum Profile: String, Sendable, Codable, CaseIterable {
        case _default = "default"
    }
    public var enabled: Bool?
    public var originalFile: ServerConfigCustomTranscodingOriginalFile?
    /** Allow your users to upload .mkv, .mov, .avi, .wmv, .flv, .f4v, .3g2, .3gp, .mts, m2ts, .mxf, .nut videos */
    public var allowAdditionalExtensions: Bool?
    /** If a user uploads an audio file, PeerTube will create a video by merging the preview file and the audio file */
    public var allowAudioFiles: Bool?
    /** Amount of threads used by ffmpeg for 1 transcoding job */
    public var threads: Int?
    /** Amount of transcoding jobs to execute in parallel */
    public var concurrency: Double?
    /** New profiles can be added by plugins ; available in core PeerTube: 'default'.  */
    public var profile: Profile?
    public var resolutions: ServerConfigCustomTranscodingResolutions?
    public var webVideos: ServerConfigCustomTranscodingWebVideos?
    public var hls: ServerConfigCustomTranscodingHls?

    public init(enabled: Bool? = nil, originalFile: ServerConfigCustomTranscodingOriginalFile? = nil, allowAdditionalExtensions: Bool? = nil, allowAudioFiles: Bool? = nil, threads: Int? = nil, concurrency: Double? = nil, profile: Profile? = nil, resolutions: ServerConfigCustomTranscodingResolutions? = nil, webVideos: ServerConfigCustomTranscodingWebVideos? = nil, hls: ServerConfigCustomTranscodingHls? = nil) {
        self.enabled = enabled
        self.originalFile = originalFile
        self.allowAdditionalExtensions = allowAdditionalExtensions
        self.allowAudioFiles = allowAudioFiles
        self.threads = threads
        self.concurrency = concurrency
        self.profile = profile
        self.resolutions = resolutions
        self.webVideos = webVideos
        self.hls = hls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enabled
        case originalFile
        case allowAdditionalExtensions
        case allowAudioFiles
        case threads
        case concurrency
        case profile
        case resolutions
        case webVideos = "web_videos"
        case hls
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(originalFile, forKey: .originalFile)
        try container.encodeIfPresent(allowAdditionalExtensions, forKey: .allowAdditionalExtensions)
        try container.encodeIfPresent(allowAudioFiles, forKey: .allowAudioFiles)
        try container.encodeIfPresent(threads, forKey: .threads)
        try container.encodeIfPresent(concurrency, forKey: .concurrency)
        try container.encodeIfPresent(profile, forKey: .profile)
        try container.encodeIfPresent(resolutions, forKey: .resolutions)
        try container.encodeIfPresent(webVideos, forKey: .webVideos)
        try container.encodeIfPresent(hls, forKey: .hls)
    }
}

