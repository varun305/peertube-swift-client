//
// ServerStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ServerStats: Sendable, Codable, JSONEncodable, Hashable {

    public var totalUsers: Double?
    public var totalDailyActiveUsers: Double?
    public var totalWeeklyActiveUsers: Double?
    public var totalMonthlyActiveUsers: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled total moderators stats */
    public var totalModerators: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled total admins stats */
    public var totalAdmins: Double?
    public var totalLocalVideos: Double?
    /** Total video views made on the instance */
    public var totalLocalVideoViews: Double?
    /** Total comments made by local users */
    public var totalLocalVideoComments: Double?
    public var totalLocalVideoFilesSize: Double?
    public var totalVideos: Double?
    public var totalVideoComments: Double?
    public var totalLocalVideoChannels: Double?
    public var totalLocalDailyActiveVideoChannels: Double?
    public var totalLocalWeeklyActiveVideoChannels: Double?
    public var totalLocalMonthlyActiveVideoChannels: Double?
    public var totalLocalPlaylists: Double?
    public var totalInstanceFollowers: Double?
    public var totalInstanceFollowing: Double?
    public var videosRedundancy: [ServerStatsVideosRedundancyInner]?
    public var totalActivityPubMessagesProcessed: Double?
    public var totalActivityPubMessagesSuccesses: Double?
    public var totalActivityPubMessagesErrors: Double?
    public var activityPubMessagesProcessedPerSecond: Double?
    public var totalActivityPubMessagesWaiting: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled registration requests stats */
    public var averageRegistrationRequestResponseTimeMs: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled registration requests stats */
    public var totalRegistrationRequestsProcessed: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled registration requests stats */
    public var totalRegistrationRequests: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled abuses stats */
    public var averageAbuseResponseTimeMs: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled abuses stats */
    public var totalAbusesProcessed: Double?
    /** **PeerTube >= 6.1** Value is null if the admin disabled abuses stats */
    public var totalAbuses: Double?

    public init(totalUsers: Double? = nil, totalDailyActiveUsers: Double? = nil, totalWeeklyActiveUsers: Double? = nil, totalMonthlyActiveUsers: Double? = nil, totalModerators: Double? = nil, totalAdmins: Double? = nil, totalLocalVideos: Double? = nil, totalLocalVideoViews: Double? = nil, totalLocalVideoComments: Double? = nil, totalLocalVideoFilesSize: Double? = nil, totalVideos: Double? = nil, totalVideoComments: Double? = nil, totalLocalVideoChannels: Double? = nil, totalLocalDailyActiveVideoChannels: Double? = nil, totalLocalWeeklyActiveVideoChannels: Double? = nil, totalLocalMonthlyActiveVideoChannels: Double? = nil, totalLocalPlaylists: Double? = nil, totalInstanceFollowers: Double? = nil, totalInstanceFollowing: Double? = nil, videosRedundancy: [ServerStatsVideosRedundancyInner]? = nil, totalActivityPubMessagesProcessed: Double? = nil, totalActivityPubMessagesSuccesses: Double? = nil, totalActivityPubMessagesErrors: Double? = nil, activityPubMessagesProcessedPerSecond: Double? = nil, totalActivityPubMessagesWaiting: Double? = nil, averageRegistrationRequestResponseTimeMs: Double? = nil, totalRegistrationRequestsProcessed: Double? = nil, totalRegistrationRequests: Double? = nil, averageAbuseResponseTimeMs: Double? = nil, totalAbusesProcessed: Double? = nil, totalAbuses: Double? = nil) {
        self.totalUsers = totalUsers
        self.totalDailyActiveUsers = totalDailyActiveUsers
        self.totalWeeklyActiveUsers = totalWeeklyActiveUsers
        self.totalMonthlyActiveUsers = totalMonthlyActiveUsers
        self.totalModerators = totalModerators
        self.totalAdmins = totalAdmins
        self.totalLocalVideos = totalLocalVideos
        self.totalLocalVideoViews = totalLocalVideoViews
        self.totalLocalVideoComments = totalLocalVideoComments
        self.totalLocalVideoFilesSize = totalLocalVideoFilesSize
        self.totalVideos = totalVideos
        self.totalVideoComments = totalVideoComments
        self.totalLocalVideoChannels = totalLocalVideoChannels
        self.totalLocalDailyActiveVideoChannels = totalLocalDailyActiveVideoChannels
        self.totalLocalWeeklyActiveVideoChannels = totalLocalWeeklyActiveVideoChannels
        self.totalLocalMonthlyActiveVideoChannels = totalLocalMonthlyActiveVideoChannels
        self.totalLocalPlaylists = totalLocalPlaylists
        self.totalInstanceFollowers = totalInstanceFollowers
        self.totalInstanceFollowing = totalInstanceFollowing
        self.videosRedundancy = videosRedundancy
        self.totalActivityPubMessagesProcessed = totalActivityPubMessagesProcessed
        self.totalActivityPubMessagesSuccesses = totalActivityPubMessagesSuccesses
        self.totalActivityPubMessagesErrors = totalActivityPubMessagesErrors
        self.activityPubMessagesProcessedPerSecond = activityPubMessagesProcessedPerSecond
        self.totalActivityPubMessagesWaiting = totalActivityPubMessagesWaiting
        self.averageRegistrationRequestResponseTimeMs = averageRegistrationRequestResponseTimeMs
        self.totalRegistrationRequestsProcessed = totalRegistrationRequestsProcessed
        self.totalRegistrationRequests = totalRegistrationRequests
        self.averageAbuseResponseTimeMs = averageAbuseResponseTimeMs
        self.totalAbusesProcessed = totalAbusesProcessed
        self.totalAbuses = totalAbuses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalUsers
        case totalDailyActiveUsers
        case totalWeeklyActiveUsers
        case totalMonthlyActiveUsers
        case totalModerators
        case totalAdmins
        case totalLocalVideos
        case totalLocalVideoViews
        case totalLocalVideoComments
        case totalLocalVideoFilesSize
        case totalVideos
        case totalVideoComments
        case totalLocalVideoChannels
        case totalLocalDailyActiveVideoChannels
        case totalLocalWeeklyActiveVideoChannels
        case totalLocalMonthlyActiveVideoChannels
        case totalLocalPlaylists
        case totalInstanceFollowers
        case totalInstanceFollowing
        case videosRedundancy
        case totalActivityPubMessagesProcessed
        case totalActivityPubMessagesSuccesses
        case totalActivityPubMessagesErrors
        case activityPubMessagesProcessedPerSecond
        case totalActivityPubMessagesWaiting
        case averageRegistrationRequestResponseTimeMs
        case totalRegistrationRequestsProcessed
        case totalRegistrationRequests
        case averageAbuseResponseTimeMs
        case totalAbusesProcessed
        case totalAbuses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(totalUsers, forKey: .totalUsers)
        try container.encodeIfPresent(totalDailyActiveUsers, forKey: .totalDailyActiveUsers)
        try container.encodeIfPresent(totalWeeklyActiveUsers, forKey: .totalWeeklyActiveUsers)
        try container.encodeIfPresent(totalMonthlyActiveUsers, forKey: .totalMonthlyActiveUsers)
        try container.encodeIfPresent(totalModerators, forKey: .totalModerators)
        try container.encodeIfPresent(totalAdmins, forKey: .totalAdmins)
        try container.encodeIfPresent(totalLocalVideos, forKey: .totalLocalVideos)
        try container.encodeIfPresent(totalLocalVideoViews, forKey: .totalLocalVideoViews)
        try container.encodeIfPresent(totalLocalVideoComments, forKey: .totalLocalVideoComments)
        try container.encodeIfPresent(totalLocalVideoFilesSize, forKey: .totalLocalVideoFilesSize)
        try container.encodeIfPresent(totalVideos, forKey: .totalVideos)
        try container.encodeIfPresent(totalVideoComments, forKey: .totalVideoComments)
        try container.encodeIfPresent(totalLocalVideoChannels, forKey: .totalLocalVideoChannels)
        try container.encodeIfPresent(totalLocalDailyActiveVideoChannels, forKey: .totalLocalDailyActiveVideoChannels)
        try container.encodeIfPresent(totalLocalWeeklyActiveVideoChannels, forKey: .totalLocalWeeklyActiveVideoChannels)
        try container.encodeIfPresent(totalLocalMonthlyActiveVideoChannels, forKey: .totalLocalMonthlyActiveVideoChannels)
        try container.encodeIfPresent(totalLocalPlaylists, forKey: .totalLocalPlaylists)
        try container.encodeIfPresent(totalInstanceFollowers, forKey: .totalInstanceFollowers)
        try container.encodeIfPresent(totalInstanceFollowing, forKey: .totalInstanceFollowing)
        try container.encodeIfPresent(videosRedundancy, forKey: .videosRedundancy)
        try container.encodeIfPresent(totalActivityPubMessagesProcessed, forKey: .totalActivityPubMessagesProcessed)
        try container.encodeIfPresent(totalActivityPubMessagesSuccesses, forKey: .totalActivityPubMessagesSuccesses)
        try container.encodeIfPresent(totalActivityPubMessagesErrors, forKey: .totalActivityPubMessagesErrors)
        try container.encodeIfPresent(activityPubMessagesProcessedPerSecond, forKey: .activityPubMessagesProcessedPerSecond)
        try container.encodeIfPresent(totalActivityPubMessagesWaiting, forKey: .totalActivityPubMessagesWaiting)
        try container.encodeIfPresent(averageRegistrationRequestResponseTimeMs, forKey: .averageRegistrationRequestResponseTimeMs)
        try container.encodeIfPresent(totalRegistrationRequestsProcessed, forKey: .totalRegistrationRequestsProcessed)
        try container.encodeIfPresent(totalRegistrationRequests, forKey: .totalRegistrationRequests)
        try container.encodeIfPresent(averageAbuseResponseTimeMs, forKey: .averageAbuseResponseTimeMs)
        try container.encodeIfPresent(totalAbusesProcessed, forKey: .totalAbusesProcessed)
        try container.encodeIfPresent(totalAbuses, forKey: .totalAbuses)
    }
}

