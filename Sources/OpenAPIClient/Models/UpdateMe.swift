//
// UpdateMe.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UpdateMe: Sendable, Codable, JSONEncodable, Hashable {

    public enum DisplayNSFW: String, Sendable, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
        case both = "both"
    }
    public static let passwordRule = StringRule(minLength: 6, maxLength: 255, pattern: nil)
    public static let currentPasswordRule = StringRule(minLength: 6, maxLength: 255, pattern: nil)
    public static let displayNameRule = StringRule(minLength: 3, maxLength: 120, pattern: nil)
    public var password: String?
    public var currentPassword: String?
    /** new email used for login and service communications */
    public var email: String?
    /** new name of the user in its representations */
    public var displayName: String?
    /** new NSFW display policy */
    public var displayNSFW: DisplayNSFW?
    /** whether to enable P2P in the player or not */
    public var p2pEnabled: Bool?
    /** new preference regarding playing videos automatically */
    public var autoPlayVideo: Bool?
    /** new preference regarding playing following videos automatically */
    public var autoPlayNextVideo: Bool?
    /** new preference regarding playing following playlist videos automatically */
    public var autoPlayNextVideoPlaylist: Bool?
    /** whether to keep track of watched history or not */
    public var videosHistoryEnabled: Bool?
    /** list of languages to filter videos down to */
    public var videoLanguages: [String]?
    public var theme: String?
    public var noInstanceConfigWarningModal: Bool?
    public var noAccountSetupWarningModal: Bool?
    public var noWelcomeModal: Bool?

    public init(password: String? = nil, currentPassword: String? = nil, email: String? = nil, displayName: String? = nil, displayNSFW: DisplayNSFW? = nil, p2pEnabled: Bool? = nil, autoPlayVideo: Bool? = nil, autoPlayNextVideo: Bool? = nil, autoPlayNextVideoPlaylist: Bool? = nil, videosHistoryEnabled: Bool? = nil, videoLanguages: [String]? = nil, theme: String? = nil, noInstanceConfigWarningModal: Bool? = nil, noAccountSetupWarningModal: Bool? = nil, noWelcomeModal: Bool? = nil) {
        self.password = password
        self.currentPassword = currentPassword
        self.email = email
        self.displayName = displayName
        self.displayNSFW = displayNSFW
        self.p2pEnabled = p2pEnabled
        self.autoPlayVideo = autoPlayVideo
        self.autoPlayNextVideo = autoPlayNextVideo
        self.autoPlayNextVideoPlaylist = autoPlayNextVideoPlaylist
        self.videosHistoryEnabled = videosHistoryEnabled
        self.videoLanguages = videoLanguages
        self.theme = theme
        self.noInstanceConfigWarningModal = noInstanceConfigWarningModal
        self.noAccountSetupWarningModal = noAccountSetupWarningModal
        self.noWelcomeModal = noWelcomeModal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case password
        case currentPassword
        case email
        case displayName
        case displayNSFW
        case p2pEnabled
        case autoPlayVideo
        case autoPlayNextVideo
        case autoPlayNextVideoPlaylist
        case videosHistoryEnabled
        case videoLanguages
        case theme
        case noInstanceConfigWarningModal
        case noAccountSetupWarningModal
        case noWelcomeModal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(currentPassword, forKey: .currentPassword)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(displayNSFW, forKey: .displayNSFW)
        try container.encodeIfPresent(p2pEnabled, forKey: .p2pEnabled)
        try container.encodeIfPresent(autoPlayVideo, forKey: .autoPlayVideo)
        try container.encodeIfPresent(autoPlayNextVideo, forKey: .autoPlayNextVideo)
        try container.encodeIfPresent(autoPlayNextVideoPlaylist, forKey: .autoPlayNextVideoPlaylist)
        try container.encodeIfPresent(videosHistoryEnabled, forKey: .videosHistoryEnabled)
        try container.encodeIfPresent(videoLanguages, forKey: .videoLanguages)
        try container.encodeIfPresent(theme, forKey: .theme)
        try container.encodeIfPresent(noInstanceConfigWarningModal, forKey: .noInstanceConfigWarningModal)
        try container.encodeIfPresent(noAccountSetupWarningModal, forKey: .noAccountSetupWarningModal)
        try container.encodeIfPresent(noWelcomeModal, forKey: .noWelcomeModal)
    }
}

