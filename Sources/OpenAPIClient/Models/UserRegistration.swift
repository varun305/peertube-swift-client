//
// UserRegistration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserRegistration: Sendable, Codable, JSONEncodable, Hashable {

    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int?
    public var state: UserRegistrationState?
    public var registrationReason: String?
    public var moderationResponse: String?
    public var username: String?
    public var email: String?
    public var emailVerified: Bool?
    public var accountDisplayName: String?
    public var channelHandle: String?
    public var channelDisplayName: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var user: UserRegistrationUser?

    public init(id: Int? = nil, state: UserRegistrationState? = nil, registrationReason: String? = nil, moderationResponse: String? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, accountDisplayName: String? = nil, channelHandle: String? = nil, channelDisplayName: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, user: UserRegistrationUser? = nil) {
        self.id = id
        self.state = state
        self.registrationReason = registrationReason
        self.moderationResponse = moderationResponse
        self.username = username
        self.email = email
        self.emailVerified = emailVerified
        self.accountDisplayName = accountDisplayName
        self.channelHandle = channelHandle
        self.channelDisplayName = channelDisplayName
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case state
        case registrationReason
        case moderationResponse
        case username
        case email
        case emailVerified
        case accountDisplayName
        case channelHandle
        case channelDisplayName
        case createdAt
        case updatedAt
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(registrationReason, forKey: .registrationReason)
        try container.encodeIfPresent(moderationResponse, forKey: .moderationResponse)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailVerified, forKey: .emailVerified)
        try container.encodeIfPresent(accountDisplayName, forKey: .accountDisplayName)
        try container.encodeIfPresent(channelHandle, forKey: .channelHandle)
        try container.encodeIfPresent(channelDisplayName, forKey: .channelDisplayName)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserRegistration: Identifiable {}
