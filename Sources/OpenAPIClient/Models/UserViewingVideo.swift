//
// UserViewingVideo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserViewingVideo: Sendable, Codable, JSONEncodable, Hashable {

    public enum ViewEvent: String, Sendable, Codable, CaseIterable {
        case seek = "seek"
    }
    /** timestamp within the video, in seconds */
    public var currentTime: Int
    /** Event since last viewing call:  * `seek` - If the user seeked the video  */
    public var viewEvent: ViewEvent?
    /** Optional param to represent the current viewer session. Used by the backend to properly count one view per session per video. PeerTube admin can configure the server to not trust this `sessionId` parameter but use the request IP address instead to identify a viewer.  */
    public var sessionId: String?

    public init(currentTime: Int, viewEvent: ViewEvent? = nil, sessionId: String? = nil) {
        self.currentTime = currentTime
        self.viewEvent = viewEvent
        self.sessionId = sessionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentTime
        case viewEvent
        case sessionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(currentTime, forKey: .currentTime)
        try container.encodeIfPresent(viewEvent, forKey: .viewEvent)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
    }
}

