//
// VideoBlacklist.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VideoBlacklist: Sendable, Codable, JSONEncodable, Hashable {

    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let videoIdRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let nameRule = StringRule(minLength: 3, maxLength: 120, pattern: nil)
    public static let uuidRule = StringRule(minLength: 36, maxLength: 36, pattern: "/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
    public static let descriptionRule = StringRule(minLength: 3, maxLength: 10000, pattern: nil)
    public var id: Int?
    public var videoId: Int?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var name: String?
    public var uuid: UUID?
    public var description: String?
    public var duration: Int?
    public var views: Int?
    public var likes: Int?
    public var dislikes: Int?
    public var nsfw: Bool?

    public init(id: Int? = nil, videoId: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, name: String? = nil, uuid: UUID? = nil, description: String? = nil, duration: Int? = nil, views: Int? = nil, likes: Int? = nil, dislikes: Int? = nil, nsfw: Bool? = nil) {
        self.id = id
        self.videoId = videoId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self.uuid = uuid
        self.description = description
        self.duration = duration
        self.views = views
        self.likes = likes
        self.dislikes = dislikes
        self.nsfw = nsfw
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case videoId
        case createdAt
        case updatedAt
        case name
        case uuid
        case description
        case duration
        case views
        case likes
        case dislikes
        case nsfw
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(videoId, forKey: .videoId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(views, forKey: .views)
        try container.encodeIfPresent(likes, forKey: .likes)
        try container.encodeIfPresent(dislikes, forKey: .dislikes)
        try container.encodeIfPresent(nsfw, forKey: .nsfw)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension VideoBlacklist: Identifiable {}
