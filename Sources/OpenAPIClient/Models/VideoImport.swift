//
// VideoImport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VideoImport: Sendable, Codable, JSONEncodable, Hashable {

    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let magnetUriRule = StringRule(minLength: nil, maxLength: nil, pattern: "/magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32}/i")
    public var id: Int?
    /** remote URL where to find the import's source video */
    public var targetUrl: String?
    /** magnet URI allowing to resolve the import's source video */
    public var magnetUri: String?
    /** Torrent file containing only the video file */
    public var torrentfile: URL?
    public var torrentName: String?
    public var state: VideoImportStateConstant?
    public var error: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var video: Video?

    public init(id: Int? = nil, targetUrl: String? = nil, magnetUri: String? = nil, torrentfile: URL? = nil, torrentName: String? = nil, state: VideoImportStateConstant? = nil, error: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, video: Video? = nil) {
        self.id = id
        self.targetUrl = targetUrl
        self.magnetUri = magnetUri
        self.torrentfile = torrentfile
        self.torrentName = torrentName
        self.state = state
        self.error = error
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.video = video
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case targetUrl
        case magnetUri
        case torrentfile
        case torrentName
        case state
        case error
        case createdAt
        case updatedAt
        case video
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(targetUrl, forKey: .targetUrl)
        try container.encodeIfPresent(magnetUri, forKey: .magnetUri)
        try container.encodeIfPresent(torrentfile, forKey: .torrentfile)
        try container.encodeIfPresent(torrentName, forKey: .torrentName)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(video, forKey: .video)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension VideoImport: Identifiable {}
