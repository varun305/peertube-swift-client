//
// VideoRedundancy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VideoRedundancy: Sendable, Codable, JSONEncodable, Hashable {

    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let uuidRule = StringRule(minLength: 36, maxLength: 36, pattern: "/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
    public var id: Int?
    public var name: String?
    public var url: String?
    public var uuid: UUID?
    public var redundancies: VideoRedundancyRedundancies?

    public init(id: Int? = nil, name: String? = nil, url: String? = nil, uuid: UUID? = nil, redundancies: VideoRedundancyRedundancies? = nil) {
        self.id = id
        self.name = name
        self.url = url
        self.uuid = uuid
        self.redundancies = redundancies
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case url
        case uuid
        case redundancies
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(redundancies, forKey: .redundancies)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension VideoRedundancy: Identifiable {}
