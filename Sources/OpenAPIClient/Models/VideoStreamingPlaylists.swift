//
// VideoStreamingPlaylists.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VideoStreamingPlaylists: Sendable, Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Sendable, Codable, CaseIterable {
        case _1 = 1
    }
    public static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var playlistUrl: String?
    public var segmentsSha256Url: String?
    /** Video files associated to this playlist.  The difference with the root `files` property is that these files are fragmented, so they can be used in this streaming playlist (HLS, etc.)  */
    public var files: [VideoFile]?
    public var redundancies: [VideoStreamingPlaylistsHLSRedundanciesInner]?
    public var id: Int?
    /** Playlist type: - `1`: HLS  */
    public var type: ModelType?

    public init(playlistUrl: String? = nil, segmentsSha256Url: String? = nil, files: [VideoFile]? = nil, redundancies: [VideoStreamingPlaylistsHLSRedundanciesInner]? = nil, id: Int? = nil, type: ModelType? = nil) {
        self.playlistUrl = playlistUrl
        self.segmentsSha256Url = segmentsSha256Url
        self.files = files
        self.redundancies = redundancies
        self.id = id
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case playlistUrl
        case segmentsSha256Url
        case files
        case redundancies
        case id
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(playlistUrl, forKey: .playlistUrl)
        try container.encodeIfPresent(segmentsSha256Url, forKey: .segmentsSha256Url)
        try container.encodeIfPresent(files, forKey: .files)
        try container.encodeIfPresent(redundancies, forKey: .redundancies)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension VideoStreamingPlaylists: Identifiable {}
