//
// VideosForXMLInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VideosForXMLInner: Sendable, Codable, JSONEncodable, Hashable {

    public enum MediaRating: String, Sendable, Codable, CaseIterable {
        case nonadult = "nonadult"
        case adult = "adult"
    }
    /** video watch page URL */
    public var link: String?
    /** video canonical URL */
    public var guid: String?
    /** video publication date */
    public var pubDate: Date?
    /** video description */
    public var description: String?
    /** video description */
    public var contentEncoded: String?
    /** publisher user name */
    public var dcCreator: String?
    /** video category (MRSS) */
    public var mediaCategory: Int?
    public var mediaCommunity: VideosForXMLInnerMediaCommunity?
    public var mediaEmbed: VideosForXMLInnerMediaEmbed?
    public var mediaPlayer: VideosForXMLInnerMediaPlayer?
    public var mediaThumbnail: VideosForXMLInnerMediaThumbnail?
    /** see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles. */
    public var mediaTitle: String?
    public var mediaDescription: String?
    /** see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS) */
    public var mediaRating: MediaRating?
    public var enclosure: VideosForXMLInnerEnclosure?
    /** list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS) */
    public var mediaGroup: [VideosForXMLInnerMediaGroupInner]?

    public init(link: String? = nil, guid: String? = nil, pubDate: Date? = nil, description: String? = nil, contentEncoded: String? = nil, dcCreator: String? = nil, mediaCategory: Int? = nil, mediaCommunity: VideosForXMLInnerMediaCommunity? = nil, mediaEmbed: VideosForXMLInnerMediaEmbed? = nil, mediaPlayer: VideosForXMLInnerMediaPlayer? = nil, mediaThumbnail: VideosForXMLInnerMediaThumbnail? = nil, mediaTitle: String? = nil, mediaDescription: String? = nil, mediaRating: MediaRating? = nil, enclosure: VideosForXMLInnerEnclosure? = nil, mediaGroup: [VideosForXMLInnerMediaGroupInner]? = nil) {
        self.link = link
        self.guid = guid
        self.pubDate = pubDate
        self.description = description
        self.contentEncoded = contentEncoded
        self.dcCreator = dcCreator
        self.mediaCategory = mediaCategory
        self.mediaCommunity = mediaCommunity
        self.mediaEmbed = mediaEmbed
        self.mediaPlayer = mediaPlayer
        self.mediaThumbnail = mediaThumbnail
        self.mediaTitle = mediaTitle
        self.mediaDescription = mediaDescription
        self.mediaRating = mediaRating
        self.enclosure = enclosure
        self.mediaGroup = mediaGroup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case link
        case guid
        case pubDate
        case description
        case contentEncoded = "content:encoded"
        case dcCreator = "dc:creator"
        case mediaCategory = "media:category"
        case mediaCommunity = "media:community"
        case mediaEmbed = "media:embed"
        case mediaPlayer = "media:player"
        case mediaThumbnail = "media:thumbnail"
        case mediaTitle = "media:title"
        case mediaDescription = "media:description"
        case mediaRating = "media:rating"
        case enclosure
        case mediaGroup = "media:group"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(link, forKey: .link)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(pubDate, forKey: .pubDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(contentEncoded, forKey: .contentEncoded)
        try container.encodeIfPresent(dcCreator, forKey: .dcCreator)
        try container.encodeIfPresent(mediaCategory, forKey: .mediaCategory)
        try container.encodeIfPresent(mediaCommunity, forKey: .mediaCommunity)
        try container.encodeIfPresent(mediaEmbed, forKey: .mediaEmbed)
        try container.encodeIfPresent(mediaPlayer, forKey: .mediaPlayer)
        try container.encodeIfPresent(mediaThumbnail, forKey: .mediaThumbnail)
        try container.encodeIfPresent(mediaTitle, forKey: .mediaTitle)
        try container.encodeIfPresent(mediaDescription, forKey: .mediaDescription)
        try container.encodeIfPresent(mediaRating, forKey: .mediaRating)
        try container.encodeIfPresent(enclosure, forKey: .enclosure)
        try container.encodeIfPresent(mediaGroup, forKey: .mediaGroup)
    }
}

